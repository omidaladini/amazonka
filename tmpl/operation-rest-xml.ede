{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards   #-}
{-# LANGUAGE TypeFamilies      #-}

-- Module      : Network.AWS.{{ module }}.{{ name }}
{% include "_includes/header.ede" %}

{% for line in documentation %}
  {% if line.value == "" %}
-- FIXME: Operation documentation for {{ name }}
  {% else %}
    {% if line.first %}
-- | {{ line.value }}
    {% else %}
-- {{ line.value }}
    {% endif %}
  {% endif %}
{% endfor %}
module Network.AWS.{{ module }}.{{ name }} where

import qualified Data.Text        as Text
import           Network.AWS.Core
import           Network.AWS.{{ module }}.Service
import           Network.AWS.{{ module }}.Types

{% include "_includes/method-input.ede" %}

data {{ name }} = {{ name }}
{% if input.fields | mapLength > 0 %}
{% include "_includes/fields.ede" with input.fields %}
    } deriving (Eq, Show, Generic)
{% else %}
    deriving (Eq, Show, Generic)
{% endif %}

{% include "_includes/to-headers.ede" %}

{% include "_includes/to-path.ede" %}

{% include "_includes/to-query.ede" %}

instance ToXML {{ name }} where
    toXMLOptions = xmlOptions
{% if result_wrapped %}
    toXMLRoot    = toNestedRoot
         $ "{{ name}}Response"
        :| ["{{ name }}Result"]
{% endif %}

instance AWSRequest {{ name }} where
    type Er {{ name }} = {{ module }}Error
    type Rs {{ name }} = {{ name }}Response
    request = {{ http.method | lower }}{{ service_type }} service

{% if pagination.input_token %}
instance AWSPager {{ name }} where
    next rq rs = undefined
--        | Just x <- {{ pagination.output_token }} rs = Just $ rq { {{ pagination.input_token }} = Just x }
--        | otherwise = Nothing

{% endif %}
data {{ name }}Response = {{ name }}Response
{% if output.fields | mapLength > 0 %}
{% include "_includes/fields.ede" with output.fields %}
    } deriving (Eq, Show, Generic)
{% else %}
    deriving (Eq, Show, Generic)
{% endif %}

instance FromXML {{ name }}Response where
    fromXMLOptions = xmlOptions
{% if result_wrapped %}
    fromXMLRoot    = fromNestedRoot
         $ "{{ name}}Response"
        :| ["{{ name }}Result"]
{% endif %}
