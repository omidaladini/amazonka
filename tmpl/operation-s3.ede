{-# LANGUAGE DeriveGeneric               #-}
{-# LANGUAGE OverloadedStrings           #-}
{-# LANGUAGE RecordWildCards             #-}
{-# LANGUAGE TypeFamilies                #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Module      : Network.AWS.{{ module }}.{{ name }}
{% include "_includes/header.ede" %}

{% for line in documentation %}
  {% if line.value == "" %}
-- FIXME: Operation documentation for {{ name }}
  {% else %}
    {% if line.first %}
-- | {{ line.value }}
    {% else %}
-- {{ line.value }}
    {% endif %}
  {% endif %}
{% endfor %}
module Network.AWS.{{ module }}.{{ name }} where

import           Control.Monad
import           Data.ByteString                  (ByteString)
import           Data.Conduit
import           Data.HashMap.Strict              (HashMap)
import qualified Data.HashMap.Strict              as Map
import           Data.List.NonEmpty               (NonEmpty(..))
import           Data.Monoid
import           Data.Text                        (Text)
import qualified Data.Text                        as Text
import           Data.Time                        (UTCTime)
import           GHC.Generics                     (Generic)
import           Network.AWS.Internal             hiding (Endpoint, Region, AvailabilityZone)
import           Network.HTTP.Conduit
import           Network.HTTP.QueryString.Generic (Query(List))

import Network.AWS.{{ module }}.Service
import Network.AWS.{{ module }}.Types

{% include "_includes/method-input.ede" %}

{% if alias /= "" %}
type {{ alias }} = {{ name }}
type {{ alias }}Response = {{ name }}Response

{% endif %}
data {{ name }} = {{ name }}
{% if input.fields | mapLength > 0 %}
{% include "_includes/fields.ede" with input.fields %}
    } deriving (Generic)
{% else %}
    deriving (Generic)
{% endif %}

{% include "_includes/to-headers.ede" %}

{% include "_includes/to-path.ede" %}

{% include "_includes/to-query.ede" %}

instance AWSRequest {{ name }} where
    type Er {{ name }} = {{ module }}Error
    type Rs {{ name }} = {{ name }}Response
    request  = {{ http.method | lower }}S3 service
    response = undefined

data {{ name }}Response = {{ name }}Response
{% if output.fields | mapLength > 0 %}
{% include "_includes/fields.ede" with output.fields %}
  {% if !output.streaming %}
    } deriving (Eq, Show, Generic)
  {% else %}
    }
  {% endif %}
{% else %}
    deriving (Eq, Show, Generic)
{% endif %}
{% if !output.streaming %}
{% if !output | onlyHeaders %}

instance FromXML {{ name }}Response where
    fromXMLOptions = xmlOptions
{% endif %}
{% endif %}
