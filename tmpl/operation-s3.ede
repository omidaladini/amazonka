{-# LANGUAGE DeriveGeneric               #-}
{-# LANGUAGE OverloadedStrings           #-}
{-# LANGUAGE RecordWildCards             #-}
{-# LANGUAGE TypeFamilies                #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Module      : Network.AWS.{{ module }}.{{ name }}
{% include "_includes/header.ede" %}

{% for line in documentation %}
  {% if line.value == "" %}
-- FIXME: Operation documentation for {{ name }}
  {% else %}
    {% if line.first %}
-- | {{ line.value }}
    {% else %}
-- {{ line.value }}
    {% endif %}
  {% endif %}
{% endfor %}
module Network.AWS.{{ module }}.{{ name }} where

import           Control.Monad
import           Data.ByteString      (ByteString)
import           Data.Conduit         (($$+-), ResumableSource)
import           Data.HashMap.Strict  (HashMap)
import qualified Data.HashMap.Strict  as Map
import           Data.List.NonEmpty   (NonEmpty(..))
import           Data.Text            (Text)
import qualified Data.Text            as Text
import           Data.Time            (UTCTime)
import           Network.AWS.Internal hiding (Endpoint, Region, AvailabilityZone)
import           Network.HTTP.Conduit
import           Network.HTTP.Types   (StdMethod(..))

import Network.AWS.{{ module }}.Service
import Network.AWS.{{ module }}.Types

{% if alias /= "" %}
type {{ alias }} = {{ name }}
type {{ alias }}Response = {{ name }}Response

{% endif %}
data {{ name }} = {{ name }}
{% if input.fields | mapLength > 0 %}
{% include "_includes/fields.ede" with input.fields %}
    }
{% else %}
    deriving (Eq, Show, Generic)
{% endif %}

instance AWSRequest {{ name }} where
    type Er {{ name }} = {{ module }}Error
    type Rs {{ name }} = {{ name }}Response
    request {{ name }}{..} =
{% if name == "ListBuckets" %}
        {{ signature_version }}{{ http.method }} service "" path query headers
{% else %}
  {% case http.method %}
  {% when "GET" %}
        {{ signature_version }}{{ http.method }} service {{ input.prefix }}Bucket path query headers
  {% when "HEAD" %}
        {{ signature_version }}{{ http.method }} service {{ input.prefix }}Bucket path query headers
  {% when "DELETE" %}
        {{ signature_version }}{{ http.method }} service {{ input.prefix }}Bucket path query headers
  {% else %}
        {{ signature_version }}{{ http.method }} service {{ input.prefix }}Bucket path query headers body
  {% endcase %}
{% endif %}
      where
        path = Text.concat
        {% for part in http.uri %}
          {% if part.first %}
            {% case part.value.type %}
            {% when "I" %}
            [ {{ input.prefix }}{{ part.value.value | upperFirst }}
            {% when "T" %}
            [ "{{ part.value.value }}"
          {% endcase %}
          {% else %}
            {% case part.value.type %}
            {% when "I" %}
            , {{ input.prefix }}{{ part.value.value | upperFirst }}
            {% when "T" %}
            , "{{ part.value.value }}"
            {% endcase %}
          {% endif %}
        {% endfor %}
        {% if http.uri | listLength > 0 %}
            ]
        {% endif %}

        {% if http.query | mapLength > 0%}
        query =
        {% for part in http.query %}
          {% if part.first %}
            {% if part.value == "" %}
            [ "{{ part.key }}" :?: (Nothing :: Maybe ByteString)
            {% else %}
            [ "{{ part.key }}" :?: {{ input.prefix }}{{ part.value }}
            {% endif %}
          {% else %}
            {% if part.value == "" %}
            , "{{ part.key }}" :?: Nothing
            {% else %}
            , "{{ part.key }}" :?: {{ input.prefix }}{{ part.value }}
            {% endif %}
          {% endif %}
          {% if part.last %}
            ]
          {% endif %}
        {% endfor %}
        {% else %}
        query = []
        {% endif %}

        {% if input | headers | mapLength > 0 %}
        headers =
          {% for hdr in input | headers %}
            {% if hdr.first %}
            [ "{{ hdr.value.location_name }}" ::: {{ hdr.key }}
            {% else %}
            , "{{ hdr.value.location_name }}" ::: {{ hdr.key }}
            {% endif %}
          {% endfor %}
            ]
        {% else %}
        headers = []
        {% endif %}

        {% if input | payload %}
          {% for field in input.fields %}
            {% if field.value.payload %}
              {% if field.value.streaming %}
        body = {{ field.key }}
              {% else %}
        body = xml {{ field.key }}
              {% endif %}
            {% endif %}
          {% endfor %}
        {% else %}
        body = RequestBodyBS ""
        {% endif %}
    {% if output.streaming %}

    response _ rs = return . Right $ {{ name }}Response
      {% if output | headers | mapLength > 0 %}
        {% for hdr in output | headers %}
          {% if hdr.first %}
        { {{ hdr.key }} = hdr "{{ hdr.value.location_name }}" rs
          {% else %}
        , {{ hdr.key }} = hdr "{{ hdr.value.location_name }}" rs
          {% endif %}
        {% endfor %}
      {% endif %}
      {% if output.fields | mapLength > 0 %}
        {% for field in output | fields %}
          {% if field.value.streaming %}
            {% if output.fields | mapLength == 1 %}
        { {{ field.key }} = responseBody rs
            {% else %}
        , {{ field.key }} = responseBody rs
            {% endif %}
          {% endif %}
        {% endfor %}
        }
      {% endif %}
    {% else %}
      {% if output | headers | mapLength > 0 %}

        {% if output | onlyHeaders %}
    response _ rs = do
        responseBody rs $$+- return ()
        return . Right $ {{ name }}Response
        {% else %}
    response x rs = defaultResponse x rs >>= return . either Left val
      where
        val y = Right $ y
        {% endif %}
        {% for hdr in output | headers %}
          {% if hdr.first %}
            { {{ hdr.key }} = hdr "{{ hdr.value.location_name }}" rs
          {% else %}
            , {{ hdr.key }} = hdr "{{ hdr.value.location_name }}" rs
          {% endif %}
          {% if hdr.last %}
            }
          {% endif %}
        {% endfor %}
      {% endif %}
    {% endif %}

data {{ name }}Response = {{ name }}Response
{% if output.fields | mapLength > 0 %}
{% include "_includes/fields.ede" with output.fields %}
  {% if !output.streaming %}
    } deriving (Eq, Show, Generic)
  {% else %}
    }
  {% endif %}
{% else %}
    deriving (Eq, Show, Generic)
{% endif %}
{% if !output.streaming %}
{% if !output | onlyHeaders %}

instance FromXML {{ name }}Response where
    fromXMLOptions = xmlOptions
{% endif %}
{% endif %}
