{-# LANGUAGE DeriveGeneric     #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE TypeFamilies      #-}

-- Module      : Network.AWS.{{ module }}.{{ name }}
{% include "_includes/header.ede" %}

{% for line in documentation %}
  {% if line.value == "" %}
-- FIXME: Operation documentation for {{ name }}
  {% else %}
    {% if line.first %}
-- | {{ line.value }}
    {% else %}
-- {{ line.value }}
    {% endif %}
  {% endif %}
{% endfor %}
module Network.AWS.{{ module }}.{{ name }} where

import           Data.List.NonEmpty (NonEmpty(..))
import qualified Data.List.NonEmpty as NonEmpty
import           Network.AWS.Internal
import           Network.AWS.{{ module }}.Service
import           Network.AWS.{{ module }}.Types

data {{ name }} = {{ name }}
{% if input.fields %}
{% include "_includes/fields.ede" with input.fields %}
    } deriving (Eq, Show, Generic)
{% endif %}

instance IsQuery {{ name }}

instance AWSRequest {{ name }} where
    type Er {{ name }} = {{ module }}Error
    type Rs {{ name }} = {{ name }}Response
    request = undefined -- {{ signature_version }}Query {{ endpoint_prefix | lowerFirst }} GET "{{ name }}"

{% if pagination.input_token %}
instance AWSPager {{ name }} where
    next rq = fmap (\x -> rq { {{ pagination.input_token | lowerFirst }} = x })
        . {{ pagination.output_token | lowerFirst }}

{% endif %}
data {{ name }}Response = {{ name }}Response
{% if output.fields %}
{% include "_includes/fields.ede" with output.fields %}
    } deriving (Eq, Show, Generic)
{% endif %}

instance FromXML {{ name }}Response where
    fromXMLOptions = {{ endpoint_prefix }}XMLOptions
{% if result_wrapped %}
    fromXMLRoot = fromNestedRoot $ "{{ name}}Response" :| ["{{ name }}Result"]
{% endif %}
