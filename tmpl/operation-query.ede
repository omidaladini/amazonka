{-# LANGUAGE DeriveGeneric               #-}
{-# LANGUAGE OverloadedStrings           #-}
{-# LANGUAGE TypeFamilies                #-}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Module      : Network.AWS.{{ module }}.{{ name }}
{% include "_includes/header.ede" %}

{% for line in documentation %}
  {% if line.value == "" %}
-- FIXME: Operation documentation for {{ name }}
  {% else %}
    {% if line.first %}
-- | {{ line.value }}
    {% else %}
-- {{ line.value }}
    {% endif %}
  {% endif %}
{% endfor %}
module Network.AWS.{{ module }}.{{ name }} where

import Network.AWS.Core
import Network.AWS.{{ module }}.Service
import Network.AWS.{{ module }}.Types
{% include "_includes/method-input.ede" %}

data {{ name }} = {{ name }}
{% if input.fields | mapLength > 0 %}
{% include "_includes/fields.ede" with input.fields %}
    } deriving (Eq, Show, Generic)
{% else %}
    deriving (Eq, Show, Generic)
{% endif %}

instance ToQuery {{ name }}

instance AWSRequest {{ name }} where
    type Er {{ name }} = {{ module }}Error
    type Rs {{ name }} = {{ name }}Response
    request = {{ http.method | lower }}{{ service_type }} service "{{ name }}"

{% if pagination.input_token %}
instance AWSPager {{ name }} where
{% case name %}
{% when "DescribeEngineDefaultParameters" %}
    next rq rs
        | Just _ <- marker = Just $ rq { {{ pagination.input_token }} = marker }
        | otherwise        = Nothing
      where
        marker = join . fmap edMarker $ dedpmrsEngineDefaults rs
{% else %}
    next rq rs
        | Just x <- {{ pagination.output_token }} rs = Just $ rq { {{ pagination.input_token }} = Just x }
        | otherwise = Nothing
{% endcase %}

{% endif %}
data {{ name }}Response = {{ name }}Response
{% if output.fields | mapLength > 0 %}
{% include "_includes/fields.ede" with output.fields %}
    } deriving (Eq, Show, Generic)

instance FromXML {{ name }}Response where
    fromXMLOptions = xmlOptions
  {% if result_wrapped %}
    fromXMLRoot    = fromNestedRoot
         $ "{{ name}}Response"
        :| ["{{ name }}Result"]
  {% endif %}
{% else %}
    deriving (Eq, Show, Generic)

instance FromXML {{ name }}Response where
    fromXMLOptions = xmlOptions
    fromXMLRoot    = fromRoot "{{ name }}Response"
{% endif %}
