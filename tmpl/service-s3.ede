{% raw %}
{-# LANGUAGE DeriveGeneric               #-}
{-# LANGUAGE FlexibleContexts            #-}
{-# LANGUAGE FlexibleInstances           #-}
{-# LANGUAGE OverloadedStrings           #-}
{% endraw %}

{-# OPTIONS_GHC -fno-warn-unused-imports #-}

-- Module      : Network.AWS.{{ module }}.Service
{% include "_includes/header.ede" %}

module Network.AWS.{{ module }}.Service where

import Network.AWS.Core
{% if xmlnamespace %}
import Network.AWS.Generics.XML
{% endif %}

-- | Currently supported version (@{{ api_version }}@) of the @{{ service_full_name }}@ service.
service :: ByteString -> Service
service bucket = Service
service = Service{% if global_endpoint -%} Global{% else -%} Regional{% endif -%} ({{ signature_version }} bucket) "{{ endpoint_prefix }}" "{{ api_version }}"{% if target_prefix -%} (Just "{{ target_prefix }}"){% else -%} Nothing {% endif -%}

{% if xmlnamespace %}
xmlOptions :: Tagged a XMLOptions
xmlOptions = Tagged def
    { xmlInherit   = True
    , xmlNamespace = Just "{{ xmlnamespace }}"
    }
{% endif %}

{% if errors | listLength > 0 %}
data {{ module }}Error
  {% for err in errors %}
    {% if err.first %}
    = {{ err.value.shape_name }}
    {% else %}
    | {{ err.value.shape_name }}
    {% endif %}
  {% endfor %}
      deriving (Eq, Show, Generic)
{% else %}
data {{ module }}Error = {{ module }}Error
    deriving (Eq, Show, Generic)
{% endif %}

instance FromXML {{ module }}Error where
    fromXMLOptions = xmlOptions
